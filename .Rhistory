generations2 = c(1)
maxFit2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal.fn=twoPop.one.max.predPrey.goal.fn(30), externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations2[i] = ga$gen
maxFit2[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
generations2
median(generations2)
generations2
plot(generations2)
plot(sort(generations2))
hist(generations2)
#Create a single ring with no additional connection
singleRing <- function(popSize)
{
graph = matrix(0,nrow=popSize,ncol=2)
graph[1,1] = popSize
graph[1,2] = 2
graph[popSize,1] = 1
graph[popSize,2] = popSize - 1
for (i in 2:(popSize-1))
{
graph[i,1] = i + 1
graph[i,2] = i - 1
}
}
graph = singleRing(10)
graph
source('E:/GitHub/GeneticAlgorithm/Testing Functions/spatialConstructors.R')
graph = singleRing(10)
graph
graph = singleRing(100)
n = 50
graph = singleRing(100)
generations11 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations11[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
median(generations11)
generations
generations11
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n = 30
source('E:/GitHub/GeneticAlgorithm/Testing Functions/spatialConstructors.R')
graph = gridConstructor.withDiag(100)
results3 = vector("list",n)
generations3 = c(1)
maxFit3 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=60), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
results3[[i]]=ga$reported.data
generations3[i] = ga$gen
maxFit3[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph.extra(100)
generations3.1 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=60), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
generations3.1[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations3
median(generations3)
median(generations3.1)
generations3.1
1+1
generations = c(36,31,20,29,32,34,28,36,23,48,20,29,47,21,26,29,21,23,29,17,27,40,25,31,24,23,17,23,33,29,34,32,48,26,28,28,26,23,55,17,34,34,30,23,37,38,42,36,44,23)
generationsSpatialPred = c(53,23,30,15,19,38,29,36,15,34,41,38,37,71,31,20,31,62,25,24,36,21,68,43,30,37,29,37,35,39)
length(generations)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/Testing Functions/spatialConstructors.R')
n=50
graph = gridConstructor(100)
generationsSpatialPred = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generationsSpatialPred[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
n=50
graph = gridConstructor(100)
generationsSpatialPred = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generationsSpatialPred[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = gridConstructor(100)
generationsSpatialPred = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generationsSpatialPred[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = gridConstructor(100)
generationsSpatialPred = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generationsSpatialPred[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = complete.graph(100)
generations2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations2[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph(100) #ring graph
generations.ring4.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.random4.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor(4,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.random8.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor(8,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.randomWithLine4.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor.withLine(4,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.randomWithLine4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.randomWithLine8.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor.withLine(8,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.randomWithLine8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.ring8.predprey
generations.ring4.predprey
generations.random4.predprey
generations.random4.predprey
generations.random8.predprey
generations.randomWithLine4.predprey
generations.randomWithLine8.predprey
generations2
generationsSpatialPred
graph = gridConstructor.withDiag(100) #8 connections
generations.8graph.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.8graph.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = gridConstructor.withDiag(100) #8 connections
generations.8graph.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.8graph.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph(100) #ring graph
generations.ring4.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.random4.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor(4,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.random8.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor(8,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.randomWithLine4.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor.withLine(4,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.randomWithLine4.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.randomWithLine8.predprey = c(1)
for (i in 1:n)
{
graph =randomConstructor.withLine(8,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.randomWithLine8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.8graph.predprey
generations.8graph.predprey
generations.ring4.predprey
generations.ring8.predprey
generations.random4.predprey
generations.random8.predprey
generations.randomWithLine4.predprey
generations.randomWithLine8.predprey
generations.8graph.predprey = c(85,27,29,68,73,23,51,34,28,53,39,56,64,27,47,32,27,35,94,102,52,103,35,74,36,63,58,39,45,36,32,61,56,38,45,74,41,43,30,35,45,52,46,26,24,36,37,62,54,47,50,40,32,79,28,136,52,39,30,74,18,47,58,59,36,82,35,91,37,29,67,63,47,53,25,29,97,56,55,24)
generations.8graph.predprey
length(generations.8graph.predprey)
generations.4graph.predprey = c(36,31,20,29,32,34,28,36,23,48,20,29,47,21,26,29,21,23,29,17,27,40,25,31,24,23,17,23,33,29,34,32,48,26,28,28,26,23,55,17,34,34,30,23,37,38,42,36,44,23,53,23,30,15,19,38,29,36,15,34,41,38,37,71,31,20,31,62,25,24,36,21,68,43,30,37,29,37,35,39,16,28,55,22,29,27,47,24,27,28,49,52,26,30,32,29,67,66,22,34,23,45,35,27,33,17,18,41,14,30,38,34,27,58,13,24,35,91,33,30,37,30,27,47,20,34,32,26,19,17)
generations.4graph.predprey
length(generations.4graph.predprey)
length(c(184,147,445,50,144,352,168,500,500,152,91,115,500,299,118,500,209,179,445,500,433,500,67,500,500,438,37,500,500,67,372,500,195,35,500,249,181,341,37,28,168,263,138,104,74,89,500,236,500,500,277,286,358,164,500,334,500,71,201,500,183,352,43,95,140,500,148,205,499,108,494,72,271,254,500,109,500,202,35,484,500,376,41,73,182,205,143,45,110,491,72,31,500,500,255,225,259,500,500,500,46,128,58,383,472,105,242,500,208,74,108,500,500,305,103,500,76,115,348,53,500,253,500,71,184))
length(c(69,67,32,38,34,27,36,42,87,41,76,59,74,13,78,83,64,29,66,51,46,38,165,38,70,43,44,62,42,75,94,111,37,92,29,28,34,61,26,25,39,65,41,17,66,122,44,96,39,46,30,91,107,45,47,22,29,87,39,61,27,134,36,41,83,19,57,23,45,59,73,35,99,33,70,56,51,32,20,84,32,51,62,24,40,52,69,34,45,25,35,30,24,28,70,31,28,68,42,34))
load(fitData.exp55)
load("fitData.exp55")
fitData.exp55
length(c(36,31,20,29,32,34,28,36,23,48,20,29,47,21,26,29,21,23,29,17,27,40,25,31,24,23,17,23,33,29,34,32,48,26,28,28,26,23,55,17,34,34,30,23,37,38,42,36,44,23,53,23,30,15,19,38,29,36,15,34,41,38,37,71,31,20,31,62,25,24,36,21,68,43,30,37,29,37,35,39,16,28,55,22,29,27,47,24,27,28,49,52,26,30,32,29,67,66,22,34,23,45,35,27,33,17,18,41,14,30,38,34,27,58,13,24,35,91,33,30,37,30,27,47,20,34,32,26,19,17))
length(c(85,27,29,68,73,23,51,34,28,53,39,56,64,27,47,32,27,35,94,102,52,103,35,74,36,63,58,39,45,36,32,61,56,38,45,74,41,43,30,35,45,52,46,26,24,36,37,62,54,47,50,40,32,79,28,136,52,39,30,74,18,47,58,59,36,82,35,91,37,29,67,63,47,53,25,29,97,56,55,24))
length(c(30,51,30,25,18,30,19,29,29,53,53,25,24,40,18,40,61,26,24,46,35,48,58,70,23,61,23,28,35,33,19,32,26,41,14,45,22,43,38,22,29,27,40,62,30,26,23,26,22,56,14,29,40,32,19,33,26,39,29,37,35,65,26,23,39,55,15,52,31,31,25,56,38,40,17,18,36,33,12,28,70,32,42,27,46,23,27,21,26,13,41,40,17,19,29,28,62,34,33,40))
n=20
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8.predprey = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations.ring8.predprey
n=30
#Coevo Spatial
graph = ring.graph(100)
results = vector("list",n)
generations = c(1)
maxFit = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
results[[i]]=ga$reported.data
generations[i] = ga$gen
maxFit[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/Testing Functions/spatialConstructors.R')
#Coevo Spatial
graph = ring.graph(100)
results = vector("list",n)
generations = c(1)
maxFit = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
results[[i]]=ga$reported.data
generations[i] = ga$gen
maxFit[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
graph = ring.graph(100)
generations = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=60), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
generations2[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations
generations
generations2
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=20), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(selection.type="fps",elitism=FALSE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=20),verbose=FALSE)
generationsStandard = c(127,225,291,145,84,151,65,129,70,64,94,136,176,165,172,248,199,217,150,238,207,110,85,223,83,194,78,118,189,63,83,127,96,151,154,99,86,90,67,98,197,198,144,232,62,203,135,92,194,107,139,252,95,119,180,180,133,101,175,126,125,151,150,106,112,88,233,104,201,130,88,122,147,100,144,140,127,144,141,103,193,171,156,65,73,141,65,146,126,120,126,198,131,142,88,117,129,113,197,84)
generationsStandardSpatial = c(47,44,46,142,55,47,104,42,82,38,95,69,52,39,73,44,67,30,47,81,65,27,34,36,72,38,57,39,55,309,55,44,45,78,64,87,69,64,76,58,58,106,75,63,138,121,53,53,70,79)
generationsCoevoSpatial = c(118,72,81,23,19,64,39,43,36,27,29,31,51,57,81,145,24,34,24,24,36,66,43,33,38,32,32,64,28,59,75,28,19,23,53,50,26,33,53,70,167,19,60,66,39,35,35,74,95,25,76,33,30,22,19,54,65,28,91,93)
generationsCoevo = c(61,173,52,76,102,67,485,59,81,42,140,63,149,189,34,49,57,85,136,66,105,56,500,77,76,69,77,59,79,55)
length(generationsStandard)
length(generationsStandardSpatial)
length(generationsCoevo)
length(generationsCoevoSpatial)
n=40
graph = ring.graph(100)
generations = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = gridConstructor.withDiag(100)
generations3 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=60), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
generations3[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
graph = complete.graph(100)
results4 = vector("list",n)
generations4 = c(1)
maxFit4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
results4[[i]]=ga$reported.data
generations4[i] = ga$gen
maxFit4[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
generations
generations3
generations4
generationsStandard = c(127,225,291,145,84,151,65,129,70,64,94,136,176,165,172,248,199,217,150,238,207,110,85,223,83,194,78,118,189,63,83,127,96,151,154,99,86,90,67,98,197,198,144,232,62,203,135,92,194,107,139,252,95,119,180,180,133,101,175,126,125,151,150,106,112,88,233,104,201,130,88,122,147,100,144,140,127,144,141,103,193,171,156,65,73,141,65,146,126,120,126,198,131,142,88,117,129,113,197,84)
generationsStandardSpatial = c(47,44,46,142,55,47,104,42,82,38,95,69,52,39,73,44,67,30,47,81,65,27,34,36,72,38,57,39,55,309,55,44,45,78,64,87,69,64,76,58,58,106,75,63,138,121,53,53,70,79,62,76,57,96,46,110,72,61,64,55,75,111,44,64,143,108,74,61,50,55,87,51,55,52,69,50,82,72,57,55,65,55,52,68,82,91,40,60,62,52)
generationsCoevoSpatial = c(118,72,81,23,19,64,39,43,36,27,29,31,51,57,81,145,24,34,24,24,36,66,43,33,38,32,32,64,28,59,75,28,19,23,53,50,26,33,53,70,167,19,60,66,39,35,35,74,95,25,76,33,30,22,19,54,65,28,91,93,89,101,106,41,51,39,27,24,78,24,80,28,25,17,63,49,36,42,24,28,19,26,28,48,30,24,47,24,65,22,23,37,43,57,50,21,57,28,76,40)
generationsCoevo=c(61,173,52,76,102,67,485,59,81,42,140,63,149,189,34,49,57,85,136,66,105,56,500,77,76,69,77,59,79,55,400,79,112,212,77,32,48,73,72,68,48,90,93,51,132,99,35,86,96,56,210,99,125,90,53,102,81,324,36,163,63,114,183,146,60,70,65,91,125,61)
length(generationsCoevoSpatial)
length(generationsCoevo)
length(generationsStandardSpatial)
length(generationsStandard)
n=10
graph = gridConstructor.withDiag(100)
generations3 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500), fitness.args=new.fitness.args(goal=60), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
generations3[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
n=30
graph = complete.graph(100)
results4 = vector("list",n)
generations4 = c(1)
maxFit4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
results4[[i]]=ga$reported.data
generations4[i] = ga$gen
maxFit4[i] = ga$currentGen.results@maxFit@fitness$value
print(paste(i,"Complete"))
rm(ga)
}
generations3
generations4
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial)
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations")
name(generationsCoevo)
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spa", "Coe Spa", "Coevo"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spa", "Coe", "Coe Spa"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"))
n=20
graph = complete.graph(100)
results4 = vector("list",n)
generations4 = c(1)
maxFit4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/Testing Functions/spatialConstructors.R')
n=20
graph = complete.graph(100)
results4 = vector("list",n)
generations4 = c(1)
maxFit4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
generations4
generationsStandard = c(127,225,291,145,84,151,65,129,70,64,94,136,176,165,172,248,199,217,150,238,207,110,85,223,83,194,78,118,189,63,83,127,96,151,154,99,86,90,67,98,197,198,144,232,62,203,135,92,194,107,139,252,95,119,180,180,133,101,175,126,125,151,150,106,112,88,233,104,201,130,88,122,147,100,144,140,127,144,141,103,193,171,156,65,73,141,65,146,126,120,126,198,131,142,88,117,129,113,197,84)
generationsStandardSpatial = c(47,44,46,142,55,47,104,42,82,38,95,69,52,39,73,44,67,30,47,81,65,27,34,36,72,38,57,39,55,309,55,44,45,78,64,87,69,64,76,58,58,106,75,63,138,121,53,53,70,79,62,76,57,96,46,110,72,61,64,55,75,111,44,64,143,108,74,61,50,55,87,51,55,52,69,50,82,72,57,55,65,55,52,68,82,91,40,60,62,52,72,55,45,83,47,80,124,61,92,82)
generationsCoevoSpatial = c(118,72,81,23,19,64,39,43,36,27,29,31,51,57,81,145,24,34,24,24,36,66,43,33,38,32,32,64,28,59,75,28,19,23,53,50,26,33,53,70,167,19,60,66,39,35,35,74,95,25,76,33,30,22,19,54,65,28,91,93,89,101,106,41,51,39,27,24,78,24,80,28,25,17,63,49,36,42,24,28,19,26,28,48,30,24,47,24,65,22,23,37,43,57,50,21,57,28,76,40)
generationsCoevo=c(61,173,52,76,102,67,485,59,81,42,140,63,149,189,34,49,57,85,136,66,105,56,500,77,76,69,77,59,79,55,400,79,112,212,77,32,48,73,72,68,48,90,93,51,132,99,35,86,96,56,210,99,125,90,53,102,81,324,36,163,63,114,183,146,60,70,65,91,125,61,74,96,77,70,54,54,109,500,71,85,94,111,105,310,46,105,119,70,141,61,96,86,86,61,57,120,130,104,62,133)
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevolution", "Coevolution Spatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevolution", "Coevo Spatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevo", "Coevo Spatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevo", "Coevo \nSpatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevo", "\nCoevo \nSpatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevo", "Coevo\n \nSpatial"))
boxplot(generationsStandard,generationsStandardSpatial,generationsCoevo,generationsCoevoSpatial, ylab="Generations", names=c("Standard", "Std Spatial", "Coevo", "Coevo\nSpatial"))
