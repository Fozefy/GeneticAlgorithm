load("coevo.AntiMatching")
coevo.AntiMatching = c(coevo.AntiMatching,hold)
save(coevo.AntiMatching,file="coevo.AntiMatching")
hold = coevoSpt.AntiMatching
load("coevoSpt.AntiMatching")
hold
coevoSpt.AntiMatching
coevoSpt.AntiMatching = c(coevoSpt.AntiMatching, hold)
save(coevoSpt.AntiMatching,file="coevoSpt.AntiMatching)
(
)
(
"((((
af
asd
save(coevoSpt.AntiMatching,file="coevoSpt.AntiMatching")
setwd("E:/GitHub/GeneticAlgorithm")
load(coevoSpt.AntiMatching)
load("coevoSpt.AntiMatching")
coevoSpt.AntiMatching
hold = coevo.BonusRoyalRoad
hold
load("coevo.BonusRoyalRoad")
coevo.BonusRoyalRoad
coevo.BonusRoyalRoad = c(coevo.BonusRoyalRoad,hold)
save(coevo.BonusRoyalRoad, file="coevo.BonusRoyalRoad")
hold = coevoSpt.BonusRoyalRoad
load("coevoSpt.BonusRoyalRoad")
hold
coevoSpt.BonusRoyalRoad
coevoSpt.BonusRoyalRoad = c(coevoSpt.BonusRoyalRoad,hold)
save(coevoSpt.BonusRoyalRoad,file="coevoSpt.BonusRoyalRoad")
std.BonusRoyalRoad
hold=std.BonusRoyalRoad
load("std.BonusRoyalRoad")
hold
std.BonusRoyalRoad
std.BonusRoyalRoad = c(std.BonusRoyalRoad,hold)
save(std.BonusRoyalRoad,file="std.BonusRoyalRoad")
stdSpatial.BonusRoyalRoad
hold = stdSpatial.BonusRoyalRoad
load("stdSpatial.BonusRoyalRoad")
hold
stdSpatial.BonusRoyalRoad
stdSpatial.BonusRoyalRoad = c(stdSpatial.BonusRoyalRoad,hold)
save(stdSpatial.BonusRoyalRoad,file="stdSpatial.BonusRoyalRoad")
load("coevo.RoyalRoad")
coevo.RoyalRoad
length(coevo.RoyalRoad
)
load("coevoSpt.RoyalRoad")
length(coevoSpt.RoyalRoad)
load("std.RoyalRoad")
std.RoyalRoad
hold = std.RoyalRoad
length(std.RoyalRoad)
load("std.RoyalRoad.extra")
std.RoyalRoad
std.RoyalRoad= c(hold,std.RoyalRoad)
std.RoyalRoad
save(std.RoyalRoad,file="std.RoyalRoad")
std.RoyalRoad
load("elite.two.heatmap")
load("elite.locations.five")
elite.locations.five
load("hard.elite.one.CoevoComp")
hard.elite.one.CoevoComp
load("coevoSpt.InnerMatchingMix")
coevoSpt.InnerMatchingMi
coevoSpt.InnerMatchingMix
std.Ring4.2elite
hold=std.Ring4.2elite
load("std.Ring4.2elite")
std.Ring4.2elite
std.Ring4.2elite = c(std.Ring4.2elite,hold)
std.Ring4.2elite
save(std.Ring4.2elite,file="std.Ring4.2elite")
hold=std.Ring8.2elite
hold
load("std.Ring8.2elite")
std.Ring8.2elite
std.Ring8.2elite = c(hold,std.Ring8.2elite)
save(std.Ring8.2elite,file="std.Ring8.2elite")
std.Ring8.2elite
load("std.Ring8.2elite")
std.Ring8.2elite
load("coevo.ring8.2elite")
coevo.ring8.2elite
hold = generations.ring4
load("coevo.ring4.2elite")
coevo.ring4.2elite = c(hold,generations.ring4)
hold
generations.ring4
generations.ring8
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n
n=50
graph = ring.graph(100) #ring graph
generations.ring4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring4,file="coevo.ring4.2elite")
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring8,file="coevo.ring8.2elite")
graph = gridConstructor(100)
stdSpatial.elite.three = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=3,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.three[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.three,file="stdSpatial.elite.three")
graph = gridConstructor.withDiag(100)
stdSpatial.elite.full.LargeGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=100,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
stdSpatial.elite.full.LargeGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.full.LargeGrid,file="stdSpatial.elite.full.LargeGrid")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph = gridConstructor(100) #4 connections
coevoSpt.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.PureAntiMatching,file="coevoSpt.PureAntiMatching")
graph = complete.graph(100) #complete connections
coevo.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.PureAntiMatching,file="coevo.PureAntiMatching")
graph = complete.graph(100)
std.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.PureAntiMatching,file="std.PureAntiMatching")
graph = gridConstructor(100)
stdSpatial.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.PureAntiMatching,file="stdSpatial.PureAntiMatching")
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data/Hard Elite")
load("hard.elite.one")
hard.elite.one
load("hard.elite.two")
load("hard.elite.ten")
load("hard.std.elite.two")
hard.std.elite.two
load("hard.stdSpatial.elite.two")
hard.stdS
stdSpatial.elite.two
median(stdSpatial.elite.two)
median(hard.elite.two)
median(hard.std.elite.two)
load("hard.stdSpatial.elite.two.LargeGrid")
test = stdSpatial.elite.two
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data")
load("stdSpatial.elite.two.LargeGrid")
load("stdSpatial.elite.two")
test
stdSpatial.elite.two
median(stdSpatial.elite.two)
boxplot(stdSpatial.elite.two,test)
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data/Hard Elite")
load("hard.std.elite.one")
hard.std.elite.one
length(hard.std.elite.one)
length(hard.std.elite.two)
hard.std.elite.two
boxplot(hard.std.elite.one,hard.std.elite.two)
boxplot(hard.std.elite.one,hard.std.elite.two,stdSpatial.elite.two)
boxplot(hard.std.elite.one,hard.std.elite.two,stdSpatial.elite.two,test)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
setwd("E:/GitHub/GeneticAlgorithm")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=5
graph = gridConstructor(100)
hard.elite.two = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=2,elitism=TRUE,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), verbose=FALSE,reporting.fn = reportNone.report.fn)
generational.ga(ga)
hard.elite.two[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(hard.elite.two,file="hard.elite.two")
graph = gridConstructor(100)
hard.elite.ten = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=10,elitism=TRUE,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
hard.elite.ten[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(hard.elite.ten,file="hard.elite.ten")
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=1,elitism=TRUE,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
hard.elite.one[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(hard.elite.one,file="hard.elite.one")
load("graph4.predprey.InnerMatch")
graph4.predprey.InnerMatch
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.InnerMatch, goal=46, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.InnerMatch, goal=46, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph = gridConstructor(100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.InnerMatch, goal=46, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga$reproduction.env$pop[[2]]@organisms$values[[1]]
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[2]]@chromosome$genes
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@fitness$value
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@fitness$value
geneLength = length(ga$reproduction.env$pop[[1]]@organisms$values[[2]]@chromosome$genes)
genes = ga$reproduction.env$pop[[1]]@organisms$values[[2]]@chromosome$genes[1:(geneLength/2)]
otherGenes = ga$reproduction.env$pop[[1]]@organisms$values[[2]]@chromosome$genes[(geneLength/2 + 1):geneLength]
geneLength
sum(genes == otherGenes)
genes
otherGenes
setwd("E:/GitHub/GeneticAlgorithm/extra data")
load("hard.elite.one.CoevoComp
")
load("hard.elite.one.CoevoComp")
load("hard.elite.two.CoevoComp")
load("hard.elite.three.CoevoComp")
hard.elite.one.CoevoComp
hard.elite.three.CoevoComp
hard.elite.two.CoevoComp
load("coevo.ExtraInnerMatching")
coevo.ExtraInnerMatching
load("coevo.ExtraInnerMatching")
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data/Matching Data")
hold = coevo.ExtraInnerMatching
load("coevo.ExtraInnerMatching")
coevo.ExtraInnerMatching
coevo.ExtraInnerMatching = c(coevo.ExtraInnerMatching,hold)
coevo.ExtraInnerMatching
save("coevo.ExtraInnerMatching",file="coevo.ExtraInnerMatching")
setwd("E:/GitHub/GeneticAlgorithm")
load("Matching Data/coevo.ExtraInnerMatching")
load("Matching Data/stdSpatial.ExtraInnerMatching")
load("Matching Data/std.ExtraInnerMatching")
load("Matching Data/coevoSpt.ExtraInnerMatching")
boxplot(std.ExtraInnerMatching,stdSpatial.ExtraInnerMatching,coevo.ExtraInnerMatching, coevoSpt.ExtraInnerMatching, ylab="Generations",
names=c("Standard","Std Spt","Coevo","Coevo Spt"), main="GA Types - Extra Inner Matching")
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data")
load("Matching Data/coevo.ExtraInnerMatching")
load("Matching Data/stdSpatial.ExtraInnerMatching")
load("Matching Data/std.ExtraInnerMatching")
load("Matching Data/coevoSpt.ExtraInnerMatching")
boxplot(std.ExtraInnerMatching,stdSpatial.ExtraInnerMatching,coevo.ExtraInnerMatching, coevoSpt.ExtraInnerMatching, ylab="Generations",
names=c("Standard","Std Spt","Coevo","Coevo Spt"), main="GA Types - Extra Inner Matching")
coevo.ExtraInnerMatching
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
setwd("E:/GitHub/GeneticAlgorithm")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
gridConstructor(100)
c(1:100, 1:100), nrow=100, ncol=2)
{
}
matrix(c(1:100, 1:100), nrow=100, ncol=2))
matrix(c(1:100, 1:100), nrow=100, ncol=2)
test=gridConstructor(100)
test
split(test, rep(1:ncol(test), each = nrow(test)))
split(test, rep(1:nrow(test), each = ncol(test)))
test=split(test, rep(1:nrow(test), each = ncol(test)))
test
test[99]
test
graph = gridConstructor(100)
generations.4graph.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(coevoGrid, coevoGrid), nrow=100, ncol=2)
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga$reproduction.env$pop[[1]]
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[1]
ga$reproduction.env$pop[[1]]@organisms$values[c(1,2)]
ga$reproduction.env$pop[[1]]@organisms$values[coevoGrid[1]]
coevoGrid[1]
ga$reproduction.env$pop[[1]]@organisms$values[coevoGrid[[1]]]
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
warnings()
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
c(1,1,0)
test=1
test[1]=c(1,1,0)
test
test[[1]]=c(1,1,0)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(graph4.GridFitness.predprey, file="graph4.GridFitness.predprey")
n=50
graph4.GridFitness.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(graph4.GridFitness.predprey, file="graph4.GridFitness.predprey")
graph8.GridFitness.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitness.predprey, file="graph8.GridFitness.predprey")
complete.GridFitness.predprey = c(1)
graph = complete.graph(100)
coevoGrid=complete.graph(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness.predprey, file="complete.GridFitness.predprey")
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=31), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=31), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga$reproduction.env
ga$reproduction.env$pop
ga$reproduction.env$pop[[1]]@organisms
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@fitness
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@fitness$value
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
length(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
test = onePop.one.max.withAntiMatching()
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
test
test
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(), goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
test = twoPop.one.max.withAntiMatching()
ga$reproduction.env$pop[[1]]
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
test
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
o=ga$reproduction.env$pop[[1]]@organisms$values[[1]]
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
m=matrix(c(1:100, 1:100), nrow=100, ncol=2)
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2],m)
other=ga$reproduction.env$pop[[1]]@organisms$values[[2]
)
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2]],m)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[2]],matrix(c(1:100, 1:100), nrow=100, ncol=2))
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
length(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
source('E:/GitHub/GeneticAlgorithm/defaultGAProblems.R')
test = twoPop.one.max.withAntiMatching()
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,0,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
