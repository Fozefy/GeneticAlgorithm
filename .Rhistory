coevo.ExtraInnerMatching
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
setwd("E:/GitHub/GeneticAlgorithm")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
gridConstructor(100)
c(1:100, 1:100), nrow=100, ncol=2)
{
}
matrix(c(1:100, 1:100), nrow=100, ncol=2))
matrix(c(1:100, 1:100), nrow=100, ncol=2)
test=gridConstructor(100)
test
split(test, rep(1:ncol(test), each = nrow(test)))
split(test, rep(1:nrow(test), each = ncol(test)))
test=split(test, rep(1:nrow(test), each = ncol(test)))
test
test[99]
test
graph = gridConstructor(100)
generations.4graph.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(coevoGrid, coevoGrid), nrow=100, ncol=2)
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga$reproduction.env$pop[[1]]
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[1]
ga$reproduction.env$pop[[1]]@organisms$values[c(1,2)]
ga$reproduction.env$pop[[1]]@organisms$values[coevoGrid[1]]
coevoGrid[1]
ga$reproduction.env$pop[[1]]@organisms$values[coevoGrid[[1]]]
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
generational.ga(ga)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
warnings()
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
c(1,1,0)
test=1
test[1]=c(1,1,0)
test
test[[1]]=c(1,1,0)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=TRUE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(graph4.GridFitness.predprey, file="graph4.GridFitness.predprey")
n=50
graph4.GridFitness.predprey = c(1)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(graph4.GridFitness.predprey, file="graph4.GridFitness.predprey")
graph8.GridFitness.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitness.predprey, file="graph8.GridFitness.predprey")
complete.GridFitness.predprey = c(1)
graph = complete.graph(100)
coevoGrid=complete.graph(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness.predprey, file="complete.GridFitness.predprey")
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=31), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=31), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
ga$reproduction.env
ga$reproduction.env$pop
ga$reproduction.env$pop[[1]]@organisms
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@fitness
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@fitness$value
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
length(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
test = onePop.one.max.withAntiMatching()
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
test
test
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]])
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(), goal=31, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
test = twoPop.one.max.withAntiMatching()
ga$reproduction.env$pop[[1]]
ga$reproduction.env$pop[[1]]@organisms$values
ga$reproduction.env$pop[[1]]@organisms$values[[1]]
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
test
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
o=ga$reproduction.env$pop[[1]]@organisms$values[[1]]
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
m=matrix(c(1:100, 1:100), nrow=100, ncol=2)
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2],m)
other=ga$reproduction.env$pop[[1]]@organisms$values[[2]
)
test(o,1,ga$reproduction.env$pop[[1]]@organisms$values[[2]],m)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[[2]],matrix(c(1:100, 1:100), nrow=100, ncol=2))
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
length(ga$reproduction.env$pop[[1]]@organisms$values[[1]]@chromosome$genes)
source('E:/GitHub/GeneticAlgorithm/defaultGAProblems.R')
test = twoPop.one.max.withAntiMatching()
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,0,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
ga$reproduction.env$pop[[2]]@organisms$values[[1]]@chromosome$genes = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
test(ga$reproduction.env$pop[[1]]@organisms$values[[1]],1,ga$reproduction.env$pop[2],matrix(c(1:100, 1:100), nrow=100, ncol=2))
load("coevo.AntiMatching")
load("coevoSpt.AntiMatching")
load("complete.GridFitness.predprey")
load("complete.predprey.InnerMatch")
load("complete.predprey.NoElite")
complete.predprey.NoElite
load("graph4.predprey.NoElite")
load("graph4.predprey.InnerMatch")
load("std.AntiMatching")
load("stdSpatial.AntiMatching")
load("PredPrey/complete.predprey.NoElite")
load("PredPrey/graph4.predprey.NoElite")
load("PredPrey/graph8.predprey.NoElite")
boxplot(graph4.predprey.NoElite,graph8.predprey.NoElite,complete.predprey.NoElite, ylab="Generations",
names=c("4 Graph","8 Graph","Complete"), main="Predator Prey - No Elite")
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data")
load("PredPrey/complete.predprey.NoElite")
load("PredPrey/graph4.predprey.NoElite")
load("PredPrey/graph8.predprey.NoElite")
boxplot(graph4.predprey.NoElite,graph8.predprey.NoElite,complete.predprey.NoElite, ylab="Generations",
names=c("4 Graph","8 Graph","Complete"), main="Predator Prey - No Elite")
load("PredPrey/graph4.GridFitness.predprey")
load("PredPrey/graph8.GridFitness.predprey")
load("PredPrey/complete.GridFitness.predprey")
boxplot(graph4.GridFitness.predprey,graph8.GridFitness.predprey,complete.GridFitness.predprey, ylab="Generations",
names=c("4 Graph","8 Graph","Complete"), main="Predator Prey - Fitness on Grid")
boxplot(graph4.predprey.NoElite,graph8.predprey.NoElite,complete.predprey.NoElite, ylab="Generations",
names=c("4 Graph","8 Graph","Complete"), main="Predator Prey - No Elite")
load("PredPrey/complete.predprey.InnerMatch")
load("PredPrey/graph4.predprey.InnerMatch")
load("PredPrey/graph8.predprey.InnerMatch")
boxplot(graph4.predprey.InnerMatch,graph8.predprey.InnerMatch,complete.predprey.InnerMatch, ylab="Generations",
names=c("4 Graph","8 Graph","Complete"), main="Predator Prey - Inner Match")
graph8.GridFitness4.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitness4.predprey, file="graph8.GridFitness4.predprey")
graph4.GridFitness8.predprey = c(1)
graph = gridConstructor(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph4.GridFitness8.predprey, file="graph4.GridFitness8.predprey")
complete.GridFitness4.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness4.predprey, file="complete.GridFitness4.predprey")
complete.GridFitness8.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness8.predprey, file="complete.GridFitness8.predprey")
n=50
graph8.GridFitness4.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitness4.predprey, file="graph8.GridFitness4.predprey")
graph4.GridFitness8.predprey = c(1)
graph = gridConstructor(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph4.GridFitness8.predprey, file="graph4.GridFitness8.predprey")
complete.GridFitness4.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness4.predprey, file="complete.GridFitness4.predprey")
complete.GridFitness8.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness8.predprey, file="complete.GridFitness8.predprey")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
setwd("E:/GitHub/GeneticAlgorithm")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph8.GridFitness4.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitness4.predprey, file="graph8.GridFitness4.predprey")
graph4.GridFitness8.predprey = c(1)
graph = gridConstructor(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph4.GridFitness8.predprey, file="graph4.GridFitness8.predprey")
complete.GridFitness4.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness4.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness4.predprey, file="complete.GridFitness4.predprey")
complete.GridFitness8.predprey = c(1)
graph = complete.graph(100)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GridFitness8.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GridFitness8.predprey, file="complete.GridFitness8.predprey")
graph8.GridFitnessComp.predprey = c(1)
graph = gridConstructor.withDiag(100)
coevoGrid=complete.graph(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph8.GridFitnessComp.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph8.GridFitnessComp.predprey, file="graph8.GridFitnessComp.predprey")
graph4.GridFitnessComp.predprey = c(1)
graph = gridConstructor(100)
coevoGrid=complete.graph(100)
coevoGrid=split(coevoGrid, rep(1:nrow(coevoGrid), each = ncol(coevoGrid)))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.withGrid, goal=31, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
graph4.GridFitnessComp.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(graph4.GridFitnessComp.predprey, file="graph4.GridFitnessComp.predprey")
load("PredPrey/graph4.GridFitnessComp.predprey")
load("PredPrey/graph8.GridFitnessComp.predprey")
load("PredPrey/graph4.GridFitness8.predprey")
load("PredPrey/graph8.GridFitness4.predprey")
load("PredPrey/complete.GridFitness4.predprey")
load("PredPrey/complete.GridFitness8.predprey")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
source('E:/GitHub/GeneticAlgorithm/spatialConstructors.R')
small.ring.graph(10)
graph = small.ring.graph(100)
coevo.ring2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=2,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.ring2[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.ring2,file="coevo.ring2")
n=50
graph = small.ring.graph(100)
coevo.ring2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=2,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.ring2[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.ring2,file="coevo.ring2")
graph = small.ring.graph(100)
std.ring2 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.ring2[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.ring2,file="std.ring2")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph = complete.graph(100)
complete.GP.predprey = c(1)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid <- cbind(coevoGrid,1:100)
coevoGrid = split(coevoGrid,row(coevoGrid))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.AvgGrid, goal=100, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GP.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GP.predprey, file="complete.GP.predprey")
n=50
graph = complete.graph(100)
complete.GP.predprey = c(1)
coevoGrid=gridConstructor.withDiag(100)
coevoGrid <- cbind(coevoGrid,1:100)
coevoGrid = split(coevoGrid,row(coevoGrid))
coevoGrid = matrix(c(coevoGrid, coevoGrid), nrow=100, ncol=2)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.predPrey.AvgGrid, goal=100, externalConnectionsMatrix=coevoGrid), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
complete.GP.predprey[i] = ga$gen
print(paste(i,"Complete -",ga$gen))
rm(ga)
}
save(complete.GP.predprey, file="complete.GP.predprey")
