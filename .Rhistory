stdSpatial.elite.two.LargeGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.two.LargeGrid,file="stdSpatial.elite.two.LargeGrid")
load("coevo.rand4.2elite")
test=generations.random4
setwd("E:/GitHub/GeneticAlgorithm/Experiment Data")
load("coevo.rand4.2elite")
test
generations.random4
load("coevo.rand8.2elite")
generations.random8
boxplot(generations.random4,generations.random8)
load("coevo.rand8.2elite")
boxplot(generations.random4,generations.random8)
generations.random4
load("coevo.rand8.2elite")
generations.random4
generations.random4=0
load("coevo.rand8.2elite")
load("coevo.rand4.2elite")
boxplot(generations.random4,generations.random8)
setwd("E:/GitHub/GeneticAlgorithm")
load("hard.elite.ten")
hard.elite.ten
load("hard.elite.two.BigGrid")
hard.elite.two.BigGrid
load("coevo.pureMatching")
coevo.pureMatching
load("coevoSpt.pureMatching")
coevoSpt.pureMatching
coevoSpt.InnerMatching
load("coevoSpt.InnerMatching")
load("std.pureMatching")
load("stdSpatial.pureMatching")
boxplot(coevo.pureMatching,std.pureMatching,stdSpatial.pureMatching)
.5^15
rbinom
qbinom
qbinom(1,1,.5^15)
.5/.5^15
median(std.pureMatching
)
median(stdSpatial.pureMatching)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=20
graph = gridConstructor(100) #4 connections
coevoSpt.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.BonusRoyalRoad, goal=64, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=16), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.BonusRoyalRoad,file="coevoSpt.BonusRoyalRoad")
graph = complete.graph(100) #complete connections
coevo.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.BonusRoyalRoad, goal=64, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=16),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.BonusRoyalRoad,file="coevo.BonusRoyalRoad")
graph = complete.graph(100)
std.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.BonusRoyalRoad,goal=64), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=32),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.BonusRoyalRoad,file="std.BonusRoyalRoad")
graph = gridConstructor(100)
stdSpatial.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.BonusRoyalRoad,goal=64), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=32),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.BonusRoyalRoad,file="stdSpatial.BonusRoyalRoad")
graph = complete.graph(100) #complete connections
coevo.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.BonusRoyalRoad, goal=64, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=16),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.BonusRoyalRoad,file="coevo.BonusRoyalRoad")
graph = ring.graph(100) #ring graph
generations.ring4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring4,file="coevo.ring4.2elite")
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring8,file="coevo.ring8.2elite")
graph = ring.graph(100)
std.Ring4.2elite = c(1)
for (i in 1:n)
{
ga = new.GA.env(pop.size=100,GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.Ring4.2elite[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.Ring4.2elite,file="std.Ring4.2elite")
graph = ring.graph.extra(100)
std.Ring8.2elite = c(1)
for (i in 1:n)
{
ga = new.GA.env(pop.size=100,GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.Ring8.2elite[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.Ring8.2elite,file="std.Ring8.2elite")
setwd("E:/GitHub/GeneticAlgorithm/extra data")
n=30
graph = gridConstructor(100) #4 connections
coevoSpt.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.BonusRoyalRoad, goal=64, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=16), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.BonusRoyalRoad,file="coevoSpt.BonusRoyalRoad")
graph = complete.graph(100) #complete connections
coevo.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.BonusRoyalRoad, goal=64, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=16),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.BonusRoyalRoad,file="coevo.BonusRoyalRoad")
graph = complete.graph(100)
std.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.BonusRoyalRoad,goal=64), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=32),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.BonusRoyalRoad,file="std.BonusRoyalRoad")
graph = gridConstructor(100)
stdSpatial.BonusRoyalRoad = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.BonusRoyalRoad,goal=64), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=32),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.BonusRoyalRoad[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.BonusRoyalRoad,file="stdSpatial.BonusRoyalRoad")
graph = ring.graph(100)
std.Ring4.2elite = c(1)
for (i in 1:n)
{
ga = new.GA.env(pop.size=100,GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.Ring4.2elite[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.Ring4.2elite,file="std.Ring4.2elite")
graph = ring.graph.extra(100)
std.Ring8.2elite = c(1)
for (i in 1:n)
{
ga = new.GA.env(pop.size=100,GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.Ring8.2elite[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.Ring8.2elite,file="std.Ring8.2elite")
graph = ring.graph(100) #ring graph
generations.ring4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring4,file="coevo.ring4.2elite")
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring8,file="coevo.ring8.2elite")
n=20
#Anti Matching Mix
graph = gridConstructor(100) #4 connections
coevoSpt.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withInnerMatching(primary=2,secondary=2,matching=1), goal=60, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
n=30
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
setwd("E:/GitHub/GeneticAlgorithm")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph = gridConstructor(100) #4 connections
coevoSpt.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
setwd("E:/GitHub/GeneticAlgorithm/extra data")
graph = gridConstructor(100) #4 connections
coevoSpt.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.AntiMatching,file="coevoSpt.AntiMatching")
graph = complete.graph(100) #complete connections
coevo.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.AntiMatching,file="coevo.AntiMatching")
graph = complete.graph(100)
std.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=30), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.AntiMatching,file="std.AntiMatching")
graph = gridConstructor(100)
stdSpatial.AntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(), goal=30), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.AntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.AntiMatching,file="stdSpatial.AntiMatching")
stdSpatial.AntiMatching
hold = std.AntiMatching
setwd("E:/GitHub/GeneticAlgorithm")
load("std.AntiMatching")
std.AntiMatching
length(std.AntiMatching)
median(std.AntiMatching)
median(hold)
hold
std.AntiMatching = c(std.AntiMatching,hold)
std.AntiMatching
save(std.AntiMatching,file="std.AntiMatching")
hold = stdSpatial.AntiMatching
load("stdSpatial.AntiMatching")
stdSpatial.AntiMatching
hold
stdSpatial.AntiMatching = c(stdSpatial.AntiMatching,hold)
save(stdSpatial.AntiMatching,file="stdSpatial.AntiMatching")
hold = coevo.AntiMatching
load("coevo.AntiMatching")
coevo.AntiMatching = c(coevo.AntiMatching,hold)
save(coevo.AntiMatching,file="coevo.AntiMatching")
hold = coevoSpt.AntiMatching
load("coevoSpt.AntiMatching")
hold
coevoSpt.AntiMatching
coevoSpt.AntiMatching = c(coevoSpt.AntiMatching, hold)
save(coevoSpt.AntiMatching,file="coevoSpt.AntiMatching)
(
)
(
"((((
af
asd
save(coevoSpt.AntiMatching,file="coevoSpt.AntiMatching")
setwd("E:/GitHub/GeneticAlgorithm")
load(coevoSpt.AntiMatching)
load("coevoSpt.AntiMatching")
coevoSpt.AntiMatching
hold = coevo.BonusRoyalRoad
hold
load("coevo.BonusRoyalRoad")
coevo.BonusRoyalRoad
coevo.BonusRoyalRoad = c(coevo.BonusRoyalRoad,hold)
save(coevo.BonusRoyalRoad, file="coevo.BonusRoyalRoad")
hold = coevoSpt.BonusRoyalRoad
load("coevoSpt.BonusRoyalRoad")
hold
coevoSpt.BonusRoyalRoad
coevoSpt.BonusRoyalRoad = c(coevoSpt.BonusRoyalRoad,hold)
save(coevoSpt.BonusRoyalRoad,file="coevoSpt.BonusRoyalRoad")
std.BonusRoyalRoad
hold=std.BonusRoyalRoad
load("std.BonusRoyalRoad")
hold
std.BonusRoyalRoad
std.BonusRoyalRoad = c(std.BonusRoyalRoad,hold)
save(std.BonusRoyalRoad,file="std.BonusRoyalRoad")
stdSpatial.BonusRoyalRoad
hold = stdSpatial.BonusRoyalRoad
load("stdSpatial.BonusRoyalRoad")
hold
stdSpatial.BonusRoyalRoad
stdSpatial.BonusRoyalRoad = c(stdSpatial.BonusRoyalRoad,hold)
save(stdSpatial.BonusRoyalRoad,file="stdSpatial.BonusRoyalRoad")
load("coevo.RoyalRoad")
coevo.RoyalRoad
length(coevo.RoyalRoad
)
load("coevoSpt.RoyalRoad")
length(coevoSpt.RoyalRoad)
load("std.RoyalRoad")
std.RoyalRoad
hold = std.RoyalRoad
length(std.RoyalRoad)
load("std.RoyalRoad.extra")
std.RoyalRoad
std.RoyalRoad= c(hold,std.RoyalRoad)
std.RoyalRoad
save(std.RoyalRoad,file="std.RoyalRoad")
std.RoyalRoad
load("elite.two.heatmap")
load("elite.locations.five")
elite.locations.five
load("hard.elite.one.CoevoComp")
hard.elite.one.CoevoComp
load("coevoSpt.InnerMatchingMix")
coevoSpt.InnerMatchingMi
coevoSpt.InnerMatchingMix
std.Ring4.2elite
hold=std.Ring4.2elite
load("std.Ring4.2elite")
std.Ring4.2elite
std.Ring4.2elite = c(std.Ring4.2elite,hold)
std.Ring4.2elite
save(std.Ring4.2elite,file="std.Ring4.2elite")
hold=std.Ring8.2elite
hold
load("std.Ring8.2elite")
std.Ring8.2elite
std.Ring8.2elite = c(hold,std.Ring8.2elite)
save(std.Ring8.2elite,file="std.Ring8.2elite")
std.Ring8.2elite
load("std.Ring8.2elite")
std.Ring8.2elite
load("coevo.ring8.2elite")
coevo.ring8.2elite
hold = generations.ring4
load("coevo.ring4.2elite")
coevo.ring4.2elite = c(hold,generations.ring4)
hold
generations.ring4
generations.ring8
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n
n=50
graph = ring.graph(100) #ring graph
generations.ring4 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring4,file="coevo.ring4.2elite")
graph = ring.graph.extra(100) #ring graph more connection
generations.ring8 = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.ring8[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.ring8,file="coevo.ring8.2elite")
graph = gridConstructor(100)
stdSpatial.elite.three = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=3,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.three[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.three,file="stdSpatial.elite.three")
graph = gridConstructor.withDiag(100)
stdSpatial.elite.full.LargeGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=100,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
stdSpatial.elite.full.LargeGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.full.LargeGrid,file="stdSpatial.elite.full.LargeGrid")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph = gridConstructor(100) #4 connections
coevoSpt.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.PureAntiMatching,file="coevoSpt.PureAntiMatching")
graph = complete.graph(100) #complete connections
coevo.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.PureAntiMatching,file="coevo.PureAntiMatching")
graph = complete.graph(100)
std.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.PureAntiMatching,file="std.PureAntiMatching")
graph = gridConstructor(100)
stdSpatial.PureAntiMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withAntiMatching(primary=0,secondary=0, matching=1), goal=15), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.PureAntiMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.PureAntiMatching,file="stdSpatial.PureAntiMatching")
