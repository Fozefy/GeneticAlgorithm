for (i in 1:length(elite[[1]]))
{
elites[i] = elite[[1]][[i]]@index$value
}
elites
}
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE, reporting.fn=track.elite)
generational.ga(ga)
load("elite.one")
load("elite.one")
load("elite.one.CoevoComp")
load("std.elite.one")
load("stdSpatial.elite.one")
boxplot(std.elite.one,stdSpatial.elite.one,elite.one.CoevoComp,elite.one, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - 1 Elite")
load("elite.two")
load("elite.two.CoevoComp")
load("std.elite.two")
load("stdSpatial.elite.two")
boxplot(std.elite.two,stdSpatial.elite.two,elite.two.CoevoComp,elite.two, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - 2 Elite")
load("elite.three")
load("elite.three.CoevoComp")
load("std.elite.three")
load("stdSpatial.elite.three")
boxplot(std.elite.three,stdSpatial.elite.three,elite.three.CoevoComp,elite.three, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - 3 Elite")
load("elite.five")
load("elite.five.CoevoComp")
load("std.elite.five")
load("stdSpatial.elite.five")
boxplot(std.elite.five,stdSpatial.elite.five,elite.five.CoevoComp,elite.five, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - 5 Elite")
load("elite.ten")
load("elite.ten.CoevoComp")
load("std.elite.ten")
load("stdSpatial.elite.ten")
boxplot(std.elite.ten,stdSpatial.elite.ten,elite.ten.CoevoComp,elite.ten, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - 10 Elite")
load("elite.full")
load("elite.full.CoevoComp")
load("std.elite.full")
load("stdSpatial.elite.full")
boxplot(std.elite.full,stdSpatial.elite.full,elite.full.CoevoComp,elite.full, ylab="Generations", names=c("Standard", "Std Sp", "Coev", "Coev Sp"), main="Comparisons of GA Types - Full Elite")
load("elite.one.BigGrid")
load("elite.two.BigGrid")
load("elite.three.BigGrid")
load("elite.five.BigGrid")
load("elite.ten.BigGrid")
load("elite.full.BigGrid")
load("complete.predprey")
load("graph4.predprey")
load("graph8.predprey")
median(elite.five)
median(elite.five.CoevoComp)
median(elite.full.CoevoComp)
median(elite.full)
median(elite.one)
median(elite.one.CoevoComp)
median(elite.ten.CoevoComp)
median(elite.ten)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = complete.graph(100)
std.elite.one = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=1,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.one[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.one,file="std.elite.one")
graph = complete.graph(100)
std.elite.two = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.two[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=10
track.elite <- function(pop, mutation, cross, elite,...)
{
elites = NULL
for (i in 1:length(elite[[1]]))
{
elites[i] = elite[[1]][[i]]@index$value
}
elites
}
elite.locations.one = NULL
graph = gridConstructor(100)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=1,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE, reporting.fn=track.elite)
generational.ga(ga)
elite.locations = NULL
for(j in 2:length(ga$reported.data))
{
elite.locations[[j-1]] = ga$reported.data[[j]]@currentGen.results
}
elite.locations.one[[i]] = elite.locations
print(paste(i,"Complete"))
rm(ga)
}
n=50
graph = complete.graph(100)
std.elite.one = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=1,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.one[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = complete.graph(100)
std.elite.one = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=1,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.one[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.one,file="std.elite.one")
graph = complete.graph(100)
std.elite.two = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.two[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.two,file="std.elite.two")
graph = complete.graph(100)
std.elite.three = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=3,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.three[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.three,file="std.elite.three")
graph = complete.graph(100)
std.elite.five = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=5,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.five[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.five,file="std.elite.five")
graph = complete.graph(100)
std.elite.ten = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=10,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.ten[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.ten,file="std.elite.ten")
graph = complete.graph(100)
std.elite.full = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=100,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
std.elite.full[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.elite.full,file="std.elite.full")
generations.random4 = c(1)
for (i in 1:n)
{
graph =randomConstructor(4,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random4[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.random4,file="coevo.rand4.2elite")
#random graph - 8 connections
generations.random8 = c(1)
for (i in 1:n)
{
graph =randomConstructor(8,100)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=500,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.random8[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.random8,file="coevo.rand8.2elite")
generations.rand.2pop.4conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(4,100,2)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.2pop.4conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.2pop.4conn,file="rand.2pop.4conn")
#random graph 2 seperate pop - 8 connections
generations.rand.2pop.8conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(8,100,2)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.2pop.8conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.2pop.8conn,file="rand.2pop.8conn")
#random graph 4 seperate pop - 4 connections
generations.rand.4pop.4conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(4,100,4)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.4pop.4conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.4pop.4conn,file="rand.4pop.4conn")
#random graph 4 seperate pop - 8 connections
generations.rand.4pop.8conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(8,100,4)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.4pop.8conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.4pop.8conn,file="rand.4pop.8conn")
#random graph 10 seperate pop - 4 connections
generations.rand.10pop.4conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(4,100,10)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.10pop.4conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.10pop.4conn,file="rand.10pop.4conn")
#random graph 10 seperate pop - 8 connections
generations.rand.10pop.8conn = c(1)
for (i in 1:n)
{
graph =randomConstructor.withSeperatePop.noDuplicate(8,100,10)
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
generations.rand.10pop.8conn[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(generations.rand.10pop.8conn,file="rand.10pop.8conn")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
graph = gridConstructor(100)
stdSpatial.matching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withMatching(),goal=45), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.matching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.matching,file="stdSpatial.matching")
load("coevo.matching")
load("coevoSpt.matching")
boxplot(coevo.matching,coevoSpt.matching,stdSpatial.matching)
boxplot(coevoSpt.matching,stdSpatial.matching)
wilcox.test(coevo.matching,stdSpatial.matching)
median(coevoSpt.matching)
median(stdSpatial.matching)
qqplot(coevoSpt.matching)
qqnorm(coevoSpt.matching)
qqnorm(coevo.matching)
load("spatial.matching")
load("std.matching")
boxplot(coevo.matching,coevoSpt.matching,std.matching,stdSpatial.matching)
boxplot(coevoSpt.matching,std.matching,stdSpatial.matching)
wilcox.test(std.matching,stdSpatial.matching)
wilcox.test(coevoSpt.matching,stdSpatial.matching)
wilcox.test(coevoSpt.matching,std.matching)
median(coevoSpt.matching)
median(std.matching)
median(stdSpatial.matching)
graph = gridConstructor(100) #4 connections
coevoSpt.matching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withMatching(), goal=45, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.matching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.matching,file="coevoSpt.matching")
graph = complete.graph(100)
std.matching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withMatching(),goal=45), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
std.matching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(std.matching,file="std.matching")
graph = gridConstructor(100)
stdSpatial.matching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(fitness.fn=onePop.one.max.withMatching(),goal=45), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=30),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.matching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.matching,file="stdSpatial.matching")
load("coevoSpt.matching")
boxplot(coevoSpt.matching,std.matching,stdSpatial.matching)
median(coevoSpt.matching)
median(std.matching)
median(stdSpatial.matching)
min(stdSpatial.matching)
mi9nn(std.matching)
min(std.matching)
min(coevoSpt.matching)
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = gridConstructor.withDiag(100)
stdSpatial.elite.full.LargeGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=100,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE)
generational.ga(ga)
stdSpatial.elite.full.LargeGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.full.LargeGrid,file="stdSpatial.elite.full.LargeGrid")
#Large Grid
graph = gridConstructor.withDiag(100)
elite.one.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=1,elitism=TRUE,adjMatrix=graph), verbose=FALSE)
generational.ga(ga)
elite.one.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = gridConstructor.withDiag(100)
elite.one.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=1,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.one.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.one.BigGrid,file="elite.one.BigGrid")
graph = gridConstructor.withDiag(100)
elite.two.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=2,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.two.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.two.BigGrid,file="elite.two.BigGrid")
graph = gridConstructor.withDiag(100)
elite.three.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=3,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.three.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.three.BigGrid,file="elite.three.BigGrid")
graph = gridConstructor.withDiag(100)
elite.five.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=5,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.five.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.five.BigGrid,file="elite.five.BigGrid")
graph = gridConstructor.withDiag(100)
elite.ten.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=10,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.ten.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.ten.BigGrid,file="elite.ten.BigGrid")
graph = gridConstructor.withDiag(100)
elite.full.BigGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withCoupling(.5), goal=30, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elite.size=100,elitism=TRUE,adjMatrix=graph), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
elite.full.BigGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(elite.full.BigGrid,file="elite.full.BigGrid")
source('E:/GitHub/GeneticAlgorithm/loadAll.R')
n=50
graph = gridConstructor(100) #4 connections
coevoSpt.extraMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withMatching(matching=4), goal=90, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph),encoding.args=new.encoding.args(chr.length=15), verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevoSpt.extraMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevoSpt.extraMatching,file="coevoSpt.extraMatching")
graph = complete.graph(100) #complete connections
coevo.extraMatching = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000,numPop=2), fitness.args=new.fitness.args(fitness.fn=twoPop.one.max.withMatching(matching=4), goal=90, externalConnectionsMatrix=matrix(c(1:100, 1:100), nrow=100, ncol=2)), xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=15),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
coevo.extraMatching[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(coevo.extraMatching,file="coevo.extraMatching")
graph = gridConstructor(100)
stdSpatial.elite.one = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=1,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.one[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.one,file="stdSpatial.elite.one")
graph = gridConstructor(100)
stdSpatial.elite.two = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn = reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.two[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.two,file="stdSpatial.elite.two")
graph = gridConstructor(100)
stdSpatial.elite.ten = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=10,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.ten[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.ten,file="stdSpatial.elite.ten")
graph = gridConstructor.withDiag(100)
stdSpatial.elite.two.LargeGrid = c(1)
for (i in 1:n)
{
ga = new.GA.env(GA.base.args=new.GA.base.args(max.gen=5000), fitness.args=new.fitness.args(goal=60), mutation.args = new.mutation.args(prob.mutation=4),xover.args = new.xover.args(keepSecondaryParent=FALSE), selection.args=new.selection.args(elitism=TRUE,elite.size=2,spatial.selection.fn=spatial.child.selection.random.hardElite,adjMatrix=graph), encoding.args=new.encoding.args(chr.length=60),verbose=FALSE,reporting.fn=reportNone.report.fn)
generational.ga(ga)
stdSpatial.elite.two.LargeGrid[i] = ga$gen
print(paste(i,"Complete"))
rm(ga)
}
save(stdSpatial.elite.two.LargeGrid,file="stdSpatial.elite.two.LargeGrid")
